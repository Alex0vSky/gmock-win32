name: tests
on: { workflow_dispatch, push: { paths-ignore: [ 'README.md', 'LICENSE' ] } }
# Configuration
env:
  strDirTests: "tests"
  strDirGTest: "ThirdParty/googletest"
  strFirstObj: "gmock-win32"
  strDefaultGtestOutput: "test_detail.xml"
jobs:
  job-single:
    runs-on: windows-latest
    defaults: 
        run:
            working-directory: ${{ env.strDirTests }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Get version googleTestLatestRepo
        id: gtest-tag
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: google/googletest
          token: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Cache googleTestLatestRepo
        uses: actions/cache@v3
        with:
          path: ${{ env.strDirGTest }}
          key: cache-key-gtest-${{ steps.gtest-tag.outputs.release }}
        id: cache-gtest

      - name: Download googleTestLatestRepo
        if: steps.cache-gtest.outputs.cache-hit != 'true'
        run: | # pwsh
          git clone --depth 1 --branch ${{ steps.gtest-tag.outputs.release }} https://github.com/google/googletest.git "${{ env.strDirGTest }}"

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Build all tests
        continue-on-error: true
          # mv -v ${{ github.workspace }}\bin\$strPlatform\$strConfiguration\${{ env.strOutName }}.${{ env.strOutExt }} $dst
          # Compress-Archive -Path "$dst" -DestinationPath "${dst}.zip"
        run: | # pwsh
          dir ${{ env.strDirGTest }}/googletest/include
          dir ${{ env.strDirGTest }}/googlemock/include
          $arrSources = @( 
            'main.cpp'
            'from0ToMax.cpp' 
          );
          $arrLibs = @( 
            'kernel32.lib'
            'advapi32.lib'
            'gdi32.lib'
            'user32.lib'
          );
          echo "later"
          @( '/std:c++14', '/std:c++17', '/std:c++20', '/std:c++23' ) | % { $strCppVer=$_; }
          echo "combinations"
          @( 'x86', 'x64' ) | % { $strArch=$_; 
          @( 'msvc', 'llvm' ) | % { $strToolSet=$_; 
            if ( 'msvc' -eq $strToolSet ) {
              $process = 'cl'
              $compile = ''
            } elseif ( 'llvm' -eq $strToolSet ) {
              $process = 'clang-cl'
              $compile = '-Wno-ignored-pragma-optimize -Wno-microsoft-include -Wno-microsoft-cast -fms-compatibility -fms-extensions '
            }
            $compile += ('' +
            " /EHsc /MP " +
            " /I""../include"" /I""${{ env.strDirGTest }}/googletest/include"" /I""${{ env.strDirGTest }}/googlemock/include"" " +
            " ""../src/${{ env.strFirstObj }}.cpp"" " +
            " ""${{ env.strDirGTest }}/googletest/src/gtest-all.cc"" " +
            " ""${{ env.strDirGTest }}/googlemock/src/gmock-all.cc"" " +
            ( $arrSources -join ' ' ) +
            " /link " +
            ( $arrLibs -join ' ' ) +
            " /machine:$strArch " + 
            '')
            echo $process;
            echo $compile;
            Start-Process $process -ArgumentList $compile -Wait -NoNewWindow
            
            Start-Process "$env:strFirstObj.exe" -ArgumentList "--gtest_output=xml" -Wait
            cat "${{ env.strDefaultGtestOutput }}"
            [xml]$oSystem_Xml_XmlDocument = Get-Content "${{ env.strDefaultGtestOutput }}"
            $oSystem_Xml_XmlElement = $oSystem_Xml_XmlDocument.GetElementsByTagName( 'testsuites' ).Item( 0 );
            $failures = $oSystem_Xml_XmlElement.GetAttribute( 'failures' );
            $errors = $oSystem_Xml_XmlElement.GetAttribute( 'errors' );
            echo "gtest_failures=$failures"
            echo "gtest_errors=$errors"
          }
          }

      - name: If success
        if: ${{ success( ) }}
        run: | # pwsh
          echo "tmp echo"
      - name: If failure
        if: ${{ failure( ) }}
        run: | # pwsh
          echo "tmp echo"

      # - name: Run all tests
        # run: | # pwsh
          # $strResult = Start-Process -Wait -NoNewWindow "${{env.strTestExecutable}}"
