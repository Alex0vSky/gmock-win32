name: tests
on: { workflow_dispatch, push: { paths-ignore: [ 'README.md', 'LICENSE' ] } }
# Configuration
env:
  strDirTests: "tests"
  strDirGTest: "ThirdParty/googletest"
  strFirstObj: "gmock-win32"
  strDefaultGtestOutput: "test_detail.xml"
jobs:
  single-job:
    runs-on: windows-latest
    defaults: 
        run:
            working-directory: ${{ env.strDirTests }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Get version googleTestLatestRepo
        id: gtest-tag
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: google/googletest
          token: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Cache googleTestLatestRepo
        uses: actions/cache@v3
        with:
          path: ./${{ env.strDirTests }}/${{ env.strDirGTest }}
          key: cache-key-gtest-${{ steps.gtest-tag.outputs.release }}
        id: cache-gtest

      - name: Download googleTestLatestRepo
        if: steps.cache-gtest.outputs.cache-hit != 'true'
        run: | # pwsh
          git clone --depth 1 --branch ${{ steps.gtest-tag.outputs.release }} https://github.com/google/googletest.git "${{ env.strDirGTest }}"

      - name: Build and run all tests
        run: | # pwsh
          $pathMSBuild = vswhere -products * -requires Microsoft.Component.MSBuild -property installationPath -latest
          $path = join-path $pathMSBuild 'VC/Auxiliary/Build/vcvars32.bat'
          cmd /s /c """$path"" $args && set" | where { $_ -match '(\w+)=(.*)' } | foreach {
            $null = new-item -force -path "Env:\$($Matches[1])" -value $Matches[2]
          }
          Start-Process 'clang-cl' -ArgumentList '--version' -Wait -NoNewWindow

      - name: If success
        if: ${{ success( ) }}
        run: | # pwsh
          echo "tmp echo"
      - name: If failure
        if: ${{ failure( ) }}
        run: | # pwsh
          echo "tmp echo"

      # - name: Run all tests
        # run: | # pwsh
          # $strResult = Start-Process -Wait -NoNewWindow "${{env.strTestExecutable}}"
